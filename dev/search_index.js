var documenterSearchIndex = {"docs":
[{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you get: RequestError: Failure establishing ssh session: -5, Unable to exchange encryption keys while requesting... Try and upgrade to Julia 1.9.4. It seems to be a bug in an underlying library.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If it does not work, check your known_hosts file in your .ssh directory. ED25519 keys do not seem to work.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Use the ssh-keyscan tool: From command line, execute: ssh-keyscan [hostname]. Add the ecdsa-sha2-nistp256 line to your knownhosts file. This file is located in your .ssh-directory. This is directory is located in C:\\Users\\{youruser}\\.ssh on Windows and ~/.ssh on Linux.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"___Note: Setting up certificate authentication___","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"To set up certificate authentication, create the certificates in the ~/.ssh/idrsa and ~/.ssh/idrsa.pub files. On Windows these are located in C:\\Users\\{your user}\\.ssh. ","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Then use the function  sftp = SFTP(\"sftp://mysitewhereIhaveACertificate.com\", \"myuser\") to create a SFTP type.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Example files","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"___in \"known_hosts\"___ mysitewhereIhaveACertificate.com ssh-rsa sdsadxcvacvljsdflsajflasjdfasldjfsdlfjsldfj","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"___in \"id_rsa\"___","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"––-BEGIN RSA PRIVATE KEY––- ..... cu1sTszTVkP5/rL3CbI+9rgsuCwM67k3DiH4JGOzQpMThPvolCg=","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"––-END RSA PRIVATE KEY––-","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"___in id_rsa.pub___ ssh-rsa AAAAB3...SpjX/4t Comment here","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"After setting up the files, test using your local sftp client:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"ssh myuser@mysitewhereIhaveACertificate.com","category":"page"},{"location":"reference/#SFTP-API-Documentation","page":"SFTP API Documentation","title":"SFTP API Documentation","text":"","category":"section"},{"location":"reference/","page":"SFTP API Documentation","title":"SFTP API Documentation","text":"Modules = [SFTP]\nOrder   = [:function, :type]","category":"page"},{"location":"reference/#Base.Filesystem.basename","page":"SFTP API Documentation","title":"Base.Filesystem.basename","text":"basename(uri::SFTP.URI, path::AbstractString=\".\") -> String\nbasename(sftp::SFTP.Client, path::AbstractString=\".\") -> String\n\nGet the file name or current folder name of a path. The path can be absolute or relative to the uri or current directory of the sftp server given. If no path is given, the current path from the uri or sftp server is taken.\n\nnote: Note\nIn contrast to Julias basename, trailing slashes in paths are ignored and the last non-empty part is returned, except for the root, where the basename is empty.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.Filesystem.cd-Tuple{SFTP.Client, AbstractString}","page":"SFTP API Documentation","title":"Base.Filesystem.cd","text":"cd(sftp::SFTP.Client, dir::AbstractString)\n\nChange to dir in the uri of the sftp client.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.Filesystem.filemode","page":"SFTP API Documentation","title":"Base.Filesystem.filemode","text":"filemode(sftp::SFTP.Client, path::AbstractString = \".\") -> UInt\nfilemode(st::SFTP.StatStruct) -> UInt\n\nReturn the filemode of the SFTP.StatStruct. A convenience method exists to directly check the path on the sftp server. However, if several path objects in the same folder are analysed, it is much more performant to use statscan once and then analyse each SFTP.StatStruct.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.Filesystem.isdir","page":"SFTP API Documentation","title":"Base.Filesystem.isdir","text":"isdir(sftp::SFTP.Client, path::AbstractString = \".\") -> Bool\nisdir(st::SFTP.StatStruct) -> Bool\n\nAnalyse the SFTP.StatStruct and return true for a directory, false otherwise. A convenience method exists to directly check the path on the sftp server. However, if several path objects in the same folder are analysed, it is much more performant to use statscan once and then analyse each SFTP.StatStruct.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.Filesystem.isfile","page":"SFTP API Documentation","title":"Base.Filesystem.isfile","text":"isfile(sftp::SFTP.Client, path::AbstractString = \".\") -> Bool\nisfile(st::SFTP.StatStruct) -> Bool\n\nAnalyse the SFTP.StatStruct and return true for a file, false otherwise. A convenience method exists to directly check the path on the sftp server. However, if several path objects in the same folder are analysed, it is much more performant to use statscan once and then analyse each SFTP.StatStruct.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.Filesystem.islink","page":"SFTP API Documentation","title":"Base.Filesystem.islink","text":"islink(sftp::SFTP.Client, path::AbstractString = \".\") -> Bool\nislink(st::SFTP.StatStruct) -> Bool\n\nAnalyse the SFTP.StatStruct and return true for a symbolic link, false otherwise. A convenience method exists to directly check the path on the sftp server. However, if several path objects in the same folder are analysed, it is much more performant to use statscan once and then analyse each SFTP.StatStruct.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.Filesystem.ispath","page":"SFTP API Documentation","title":"Base.Filesystem.ispath","text":"ispath(sftp::Client, path::AbstractString = \".\") -> Bool\n\nReturn true, if a path exists on the sftp server, i.e. is a file, folder or link. Otherwise, reture false.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.Filesystem.joinpath","page":"SFTP API Documentation","title":"Base.Filesystem.joinpath","text":"joinpath(sftp::SFTP.Client, path::AbstractString...; kwargs...) -> URI\njoinpath(sftp::URI, path::AbstractString...; kwargs...) -> URI\n\nJoin any path with the uri of the sftp client or the uri directly and return an URI with the updated path.\n\nnote: Note\nThe uri field of the sftp client remains unaffected by joinpath. Use sftp.uri = joinpath(sftp, \"new/path\") to update the URI on the sftp client.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.Filesystem.mkdir-Tuple{SFTP.Client, AbstractString}","page":"SFTP API Documentation","title":"Base.Filesystem.mkdir","text":"mkdir(sftp::SFTP.Client, dir::AbstractString) -> String\n\nCreate a new dir on the sftp server and return the name of the created directory. Although a path can be given as dir, dir can only be created in an existing directory, i.e. the path up to the basename of dir must exist. Otherwise, and in case of already existing folders, an error is thrown.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.Filesystem.mkpath-Tuple{SFTP.Client, AbstractString}","page":"SFTP API Documentation","title":"Base.Filesystem.mkpath","text":"mkpath(sftp::SFTP.Client, path::AbstractString) -> String\n\nCreate a path on the sftp client and return path as String on success.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.Filesystem.mv-Tuple{SFTP.Client, AbstractString, AbstractString}","page":"SFTP API Documentation","title":"Base.Filesystem.mv","text":"mv(\n    sftp::SFTP.Client,\n    src::AbstractString,\n    dst::AbstractString;\n    force::Bool=false\n)\n\nMove src to dst in the uri of the sftp client. The parent folder dst is moved to must exist. The src is overwritten without warning, if force is set to true.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.Filesystem.pwd","page":"SFTP API Documentation","title":"Base.Filesystem.pwd","text":"pwd(sftp::SFTP.Client) -> String\npwd(uri::SFTP.URI) -> String\n\nReturn the current URI path of the SFTP Client or an URI struct. If a SFTP.Client is given, pwd checks whether the path is valid and throws an IOError otherwise. For URI there are no validity checks.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.Filesystem.readdir","page":"SFTP API Documentation","title":"Base.Filesystem.readdir","text":"readdir(\n    sftp::SFTP.Client,\n    path::AbstractString = \".\";\n    join::Bool = false,\n    sort::Bool = true,\n    check_path::Bool = false\n) -> Vector{String}\n\nRead the current directory on the sftp client and return a vector of strings with the file names just like Julia's readdir. If join is set to true, the list of file names include the absolute path. Sorting of file names can be switched off with the sort flag to optimise performance. Depending on the server settings, readdir may return an empty vector for non-existant paths. To ensure an error is thrown for non-existant paths, set check_path to true.\n\nnote: Note\nSetting check_path to true can drastically reduce the performance for large existing folders. If you know the folder structure, you should avoid setting this flag.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.Filesystem.rm-Tuple{SFTP.Client, AbstractString}","page":"SFTP API Documentation","title":"Base.Filesystem.rm","text":"rm(sftp::Client, path::AbstractString; recursive::Bool=false, force::Bool=false)\n\nRemove (delete) the path on the sftp client. Set the recursive flag to remove folders recursively. Suppress errors by setting force to true.\n\nwarning: Warning\nRecursive deletions can be very slow for large folders.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.Filesystem.splitdir","page":"SFTP API Documentation","title":"Base.Filesystem.splitdir","text":"splitdir(uri::SFTP.URI, path::AbstractString=\".\") -> Tuple{URI,String}\nsplitdir(sftp::SFTP.Client, path::AbstractString=\".\") -> Tuple{URI,String}\n\nJoin the path with the path of the URI in sftp (or itself, if only a URI is given) and then split it into the directory name and base name. Return a Tuple of URI with the split path and a String with the base name.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.Filesystem.walkdir","page":"SFTP API Documentation","title":"Base.Filesystem.walkdir","text":"walkdir(\n    sftp::SFTP.Client,\n    root::AbstractString=\".\";\n    topdown::Bool=true,\n    follow_symlinks::Bool=false,\n    skip_restricted_access::Bool=true,\n    sort::Bool=true\n) -> Channel{Tuple{String,Vector{String},Vector{String}}}\n\nReturn an iterator that walks the directory tree of the given root on the sftp client. If the root is omitted, the current URI path of the sftp client is used. The iterator returns a tuple containing (rootpath, dirs, files). The iterator starts at the root unless topdown is set to false.\n\nIf follow_symlinks is set to true, the sources of symlinks are listed rather than the symlink itself as a file. If sort is set to true, the files and directories are listed alphabetically. If a remote folder has restricted access, these directories are skipped with an info output on the terminal unless skip_restricted_access is set to false, in which case an Downloads.RequestError is thrown.\n\nExamples\n\nsftp = SFTP.Client(\"sftp://test.rebex.net/pub/example/\", \"demo\", \"password\")\nfor (root, dirs, files) in walkdir(sftp, \"/\")\n    println(\"Directories in $root\")\n    for dir in dirs\n        println(joinpath(root, dir)) # path to directories\n    end\n    println(\"Files in $root\")\n    for file in files\n        println(joinpath(root, file)) # path to files\n    end\nend\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.download","page":"SFTP API Documentation","title":"Base.download","text":"download(\n    sftp::Client,\n    src::AbstractString = \".\",\n    dst::String = \"\";\n    merge::Bool = false,\n    force::Bool = false,\n    ignore_hidden::Bool = false,\n    hide_identifier::Union{Char,AbstractString} = '.'\n) -> String\n\nDownload src from the sftp server to dst on the local system; src can be a file or folder. Folders are downloaded recursively. dst must be an existing folder on the local system, otherwise an IOError is thrown. src may include an absolute or relative path on the sftp server, which is ignored on the local system. dst can be an absolute or relative path on the local system. The function returns dst as String.\n\nAlternatively, dst can be omitted for files on the sftp server. In this case, the file content is directly saved to a variable, see example below. This option does not work for folders.\n\nIf merge is set to true, the content of src is merged into any existing dst folder. If force is set to true, any existing path at dst is overwritten without warning. If both flags are set, download first tries to mere folders and only overwrites files. If ignore_hidden is set to true, hidden files are omitted in the download. The start sequence of String or Char, with which a hidden file starts, can be specified by the hide_identifier. By default it is assumed that hidden files start with a dot (.).\n\nExample\n\nsftp = SFTP.Client(\"sftp://test.rebex.net/pub/example/\", \"demo\", \"password\")\nfiles=readdir(sftp)\ndownload_dir=\"/tmp\"\ndownload.(sftp, files, download_dir)\n````\n\nYou can also use it like this:\n\n\njulia df=DataFrame(CSV.File(download(sftp, \"/mydir/test.csv\"))) ```\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.isequal-Tuple{SFTP.StatStruct, SFTP.StatStruct}","page":"SFTP API Documentation","title":"Base.isequal","text":"isequal(a::SFTP.StatStruct, b::SFTP.StatStruct) -> Bool\n\nCompares equality between the description (desc fields) of two SFTP.StatStruct objects and returns true for equality, otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.isless-Tuple{SFTP.StatStruct, SFTP.StatStruct}","page":"SFTP API Documentation","title":"Base.isless","text":"isless(a::SFTP.StatStruct, b::SFTP.StatStruct) -> Bool\n\nCompares the descriptions (desc fields) of two SFTP.StatStruct objects and returns true, if a is lower than b, otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.stat","page":"SFTP API Documentation","title":"Base.stat","text":"stat(sftp::SFTP.Client, path::AbstractString=\".\") -> SFTP.StatStruct\n\nReturn the stat data for path on the sftp server.\n\nnote: Note\nThis returns only stat data for one object, but stat data for all objects in the same folder is obtained internally. If you need stat data for more than object in the same folder, use statscan for better performance and reduced connections to the server.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SFTP.analyse_path-Tuple{SFTP.Client, AbstractString}","page":"SFTP API Documentation","title":"SFTP.analyse_path","text":"analyse_path(sftp::SFTP.Client, root::AbstractString) -> Bool\n\nReturn, whether the root on the sftp server is a directory or a link pointing to a directory and the path of the directory.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.change_uripath-Tuple{URIs.URI, Vararg{AbstractString}}","page":"SFTP API Documentation","title":"SFTP.change_uripath","text":"change_uripath(sftp::Client, path::AbstractString...) -> URI\nchange_uripath(uri::URI, path::AbstractString; trailing_slash::Union{Bool,Nothing}=nothing) -> URI\n\nReturn an updated uri struct with the given path. When an sftp client is passed, a trailing slash will be added for directories and omitted otherwise. If a uri struct is passed, a trailing_slash is added or omitted, when the flag is true/false, or left unchanged, if trailing_slash is nothing.\n\n.. warning::     Determining directories for the method using the sftp client can be slow for large folders     and is not recommended unless absolutely needed.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.check_and_create_fingerprint-Tuple{AbstractString}","page":"SFTP API Documentation","title":"SFTP.check_and_create_fingerprint","text":"check_and_create_fingerprint(host::AbstractString) -> Nothing\n\nCheck for host in known_hosts.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.create_fingerprint-Tuple{AbstractString}","page":"SFTP API Documentation","title":"SFTP.create_fingerprint","text":"create_fingerprint(host::AbstractString) -> Nothing\n\nCreate a new entry in known_hosts for host.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.download_file","page":"SFTP API Documentation","title":"SFTP.download_file","text":"download_file(\n    sftp::Client,\n    src::URI,\n    dst::AbstractString,\n    [files::Vector{<:AbstractString},\n    conflicts::Vector{<:AbstractString},]\n    force::Union{Nothing,Bool}\n)\n\nDownload src from the sftp server to dst on the local system; src can either be a file or a path to a folder on the sftp server. In the latter case, files must be defined as a vector of strings and potential conflicts on the server given as additional vector of strings. The force flag determines, whether existing files are overwritten (true), skipped (false) or throw an error (nothing).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SFTP.findbase-Tuple{Vector{SFTP.StatStruct}, AbstractString, AbstractString}","page":"SFTP API Documentation","title":"SFTP.findbase","text":"findbase(stats::Vector{SFTP.StatStruct}, base::AbstractString, path::AbstractString) -> Int\n\nReturn the index of base in stats or throw an IOError, if base is not found.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.ftp_command-Tuple{SFTP.Client, String}","page":"SFTP API Documentation","title":"SFTP.ftp_command","text":"ftp_command(sftp::SFTP.Client, command::String)\n\nExecute the command on the sftp server.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.isfalse-Tuple{Any}","page":"SFTP API Documentation","title":"SFTP.isfalse","text":"isfalse(x)::Bool\n\nReturn true if x is a Bool and false, otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.istrue-Tuple{Any}","page":"SFTP API Documentation","title":"SFTP.istrue","text":"istrue(x)::Bool\n\nReturn true if x is a Bool and true, otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.mkfolder","page":"SFTP API Documentation","title":"SFTP.mkfolder","text":"mkfolder(\n    [sftp::Client,]\n    path::AbstractString,\n    dirs::Vector{<:AbstractString},\n    conflicts::Vector{<:AbstractString},\n    merge::Bool,\n    force::Union{Nothing, Bool},\n    [ignore_hidden::Bool,\n    hide_identifier::Union{AbstractString,Char}]\n)\n\nCreate the given path either on the sftp server or the local system, depending on whether the sftp client was passed as first argument. Ignore hidden folders starting with the hide_identifier, if ignore_hidden is true. For the local system, hidden folders are filtered by walkdir in the download function.\n\nOnly non-existing dirs from the source system are created on the destination. Existing path conflicts on the destination system are handled according to the flag settings of merge and force. Only throw an error for existing path conflicts, if merge is set to false and force is set to nothing. Delete conflicts, if force is true and merge is false, and ignore conflicts, if force is false or merge is true.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SFTP.parse_date-Tuple{AbstractString, AbstractString, AbstractString}","page":"SFTP API Documentation","title":"SFTP.parse_date","text":"parse_date(month::AbstractString, day::AbstractString, year_or_time::AbstractString) -> Float64\n\nFrom the abbreviated month name, the day and the year_or_time all given as String, return a unix timestamp.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.parse_mode-Tuple{AbstractString}","page":"SFTP API Documentation","title":"SFTP.parse_mode","text":"parse_mode(s::AbstractString) -> UInt\n\nFrom the AbstractString s, parse the file mode octal number and return as UInt.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.reset_easy_hook-Tuple{SFTP.Client}","page":"SFTP API Documentation","title":"SFTP.reset_easy_hook","text":"reset_easy_hook(sftp::SFTP.Client) -> Nothing\n\nReset curl easy options to standard as defined by the sftp client.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.set_stdopt-Tuple{SFTP.Client, Downloads.Curl.Easy}","page":"SFTP API Documentation","title":"SFTP.set_stdopt","text":"set_stdopt(sftp::SFTP.Client, easy::Easy) -> Nothing\n\nSet defaults for a number of curl easy options as defined by the sftp client.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.set_uri-Tuple{AbstractString}","page":"SFTP API Documentation","title":"SFTP.set_uri","text":"set_uri(uri::URI) -> URI\n\nReturn a URI struct from the given uri.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.statscan","page":"SFTP API Documentation","title":"SFTP.statscan","text":"statscan(\n    sftp::SFTP.Client,\n    path::AbstractString=\".\";\n    sort::Bool=true,\n    show_cwd_and_parent::Bool=false\n) -> Vector{SFTP.StatStruct}\n\nLike stat, but returns a Vector of SFTP.StatStruct with filesystem stats for all objects in the given path.\n\n** This should be preferred over stat for performance reasons. **\n\nnote: Note\nYou can only run this on directories.\n\nBy default, the SFTP.StatStruct vector is sorted by the descriptions (desc fields). For large folder contents, sort can be set to false to increase performance, if the output order is irrelevant. If show_cwd_and_parent is set to true, the SFTP.StatStruct vector includes entries for \".\" and \"..\" on position 1 and 2, respectively.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SFTP.str2number-Tuple{AbstractString}","page":"SFTP API Documentation","title":"SFTP.str2number","text":"str2number(s::AbstractString) -> Int64\n\nParse the file owner symbols in the string s to the corresponding ownership number.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.symlink_target!-Tuple{SFTP.Client, SFTP.StatStruct, AbstractString, Vector{String}, Vector{String}, Bool}","page":"SFTP API Documentation","title":"SFTP.symlink_target!","text":"symlink_target!(\n    sftp::SFTP.Client,\n    stats::SFTP.StatStruct,\n    root::AbstractString,\n    dirs::Vector{String},\n    files::Vector{String},\n    follow_symlinks::Bool\n)\n\nAnalyse the symbolic link on the sftp server from its stats and add it to the respective dirs or files list. The root path is needed to get updated stats of the symlink. Save the source of the symlink, if follow_symlinks is set to true, otherwise save symlinks as files.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.unescape_joinpath-Tuple{SFTP.Client, AbstractString}","page":"SFTP API Documentation","title":"SFTP.unescape_joinpath","text":"unescape_joinpath(sftp::SFTP.Client, path::AbstractString) -> String\n\nJoin the path with the URI path in sftp and return the unescaped path. Note, this function should not use URL:s since CURL:s api need spaces\n\n\n\n\n\n","category":"method"},{"location":"reference/#SFTP.upload","page":"SFTP API Documentation","title":"SFTP.upload","text":"upload(\n    sftp::Client,\n    src::AbstractString=\".\",\n    dst::AbstractString=\".\";\n    merge::Bool=false,\n    force::Bool=false,\n    ignore_hidden::Bool=false,\n    hide_identifier::Union{Char,AbstractString}='.'\n) -> String\n\nUpload (put) src to dst on the server; src can be a file or folder. Folders are uploaded recursively. dst must be an existing folder on the server, otherwise an IOError is thrown. src may include an absolute or relative path on the local system, which is ignored on the server. dst can be an absolute path or a path relative to the current uri path of the sftp server. The function returns dst as String.\n\nIf merge is set to true, the content of src is merged into any existing dst folder. If force is set to true, any existing path at dst on the sftp server is overwritten without warning. If both flags are set, upload first tries to mere folders and only overwrites files. If ignore_hidden is set to true, hidden files are omitted in the upload. The start sequence of String or Char, with which a hidden file starts, can be specified by the hide_identifier. By default it is assumed that hidden files start with a dot (.).\n\nExamples\n\nsftp = SFTP.Client(\"sftp://test.rebex.net\", \"demo\", \"password\")\n\nupload(sftp, \"data/test.csv\", \"/tmp\") # upload data/test.csv to /tmp/test.csv\n\nfiles=readdir()\nupload.(sftp, files) # all files of the current directory are uploaded to the current directory on the server\n\nupload(sftp, ignore_hidden=true) # the current folder is uploaded to the server without hidden objects\n\n\n\n\n\n","category":"function"},{"location":"reference/#SFTP.upload_file","page":"SFTP API Documentation","title":"SFTP.upload_file","text":"upload_file(\n    sftp::Client,\n    src::AbstractString,\n    dst::AbstractString,\n    [files::Vector{<:AbstractString},\n    conflicts::Vector{<:AbstractString},]\n    force::Union{Nothing,Bool},\n    ignore_hidden::Bool,\n    hide_identifier::Union{AbstractString,Char}\n)\n\nUpload src to the dst path on the sftp client. If files and conflicts are given, all files within the src folder are uploaded to the dst folder and conflicts are handled according to the force flag. Otherwise. src must be an existing file that is uploaded to the dst folder.\n\nIf force is nothing, an error is thrown for existing files on dst, if force is true, existing files are overwritten, and if force is false, upload is skipped for existing files. Hidden files starting with the hide_identifier are ignored, if ignore_hidden is set to true.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SFTP.Client","page":"SFTP API Documentation","title":"SFTP.Client","text":"mutable struct SFTP.Client\n\nSFTP manages the connection to the server and stores all relevant connection data.\n\nConstructors\n\nSFTP.Client(url::AbstractString, username::AbstractString, public_key_file::AbstractString, public_key_file::AbstractString; kwargs) -> SFTP.Client\nSFTP.Client(url::AbstractString, username::AbstractString, password::AbstractString=\"\"; kwargs) -> SFTP.Client\n\nConstruct an SFTP.Client from the url and either user information or public and private key file.\n\nArguments\n\nurl: The url to connect to, e.g., sftp://mysite.com\nusername/password: user credentials\npublic_key_file/public_key_file: authentication certificates\n\nKeyword arguments\n\ncreate_known_hosts_entry: Automatically create an entry in known hosts\ndisable_verify_peer: verify the authenticity of the peer's certificate\ndisable_verify_host: verify the host in the server's TLS certificate\nverbose: display a lot of verbose curl information\n\nImportant notice\n\nA username must be provided for both methods to work.\n\nBefore using the constructor method for certificate authentication, private and public key files must be created and stored in the ~/.ssh folder and on the server, e.g. ~/.ssh/idrsa and ~/.ssh/idrsa.pub. Additionally, the host must be added to the known_hosts file in the ~/.ssh folder.\n\nThe correct setup can be tested in the terminal with ssh myuser@mysitewhereIhaveACertificate.com.\n\nExamples\n\nsftp = SFTP.Client(\"sftp://mysitewhereIhaveACertificate.com\", \"myuser\", \"test.pub\", \"test.pem\")\nsftp = SFTP.Client(\"sftp://mysitewhereIhaveACertificate.com\", \"myuser\")\nsftp = SFTP.Client(\"sftp://test.rebex.net\", \"demo\", \"password\")\n\n\n\n\n\n","category":"type"},{"location":"reference/#SFTP.StatStruct","page":"SFTP API Documentation","title":"SFTP.StatStruct","text":"struct SFTP.StatStruct\n\nHold information for file system objects on a Server.\n\nFields\n\ndesc::String: file or folder description/name\nmode::UInt: file system object type (file, folder, etc.)\nnlink::Int: number of hard links (contents)\nuid::String: numeric user ID of the owner of the file/folder\nuid::String: numeric group ID (gid) for the file/folder\nsize::Int64: file/folder size in Byte\nmtime::Float64: modified time\n\nConstructors\n\nSFTP.StatStruct(stats::AbstractString) -> SFTP.StatStruct\n\nParse the stats string and return an SFTP.StatStruct.\n\nThe stats are of the format:\n\n\"d--x--x---  151 ftp      ftp          8192 Dec  2  2023 ..\"\n\n\n\n\n\n","category":"type"},{"location":"#Julia-SFTP-Client","page":"Home","title":"Julia SFTP Client","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An SFTP Client for Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A julia package for communicating with SFTP Servers, supporting username and password, or certificate authentication. ","category":"page"},{"location":"#SFTP-Features","page":"Home","title":"SFTP Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"- readdir\n- download\n- upload \n- cd\n- rm \n- rmdir\n- mkpath\n- mv\n- sftpstat (like stat, but more limited)","category":"page"},{"location":"#SFTP-Installation","page":"Home","title":"SFTP Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install by running:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg;Pkg.add(\"SFTP\")","category":"page"},{"location":"#SFTP-Examples","page":"Home","title":"SFTP Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"\n    using SFTP\n    sftp = SFTP(\"sftp://test.rebex.net/pub/example/\", \"demo\", \"password\")\n    files=readdir(sftp)\n    # On Windows, replace this with an appropriate path\n    downloadDir=\"/tmp/\"\n    SFTP.download.(sftp, files, downloadDir=downloadDir)\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"    #You can also use it like this\n    df=DataFrame(CSV.File(SFTP.download(sftp, \"/mydir/test.csv\")))\n\n    # For certificate authentication, you can do this (since 0.3.8)\n    sftp = SFTP(\"sftp://mysitewhereIhaveACertificate.com\", \"myuser\", \"cert.pub\", \"cert.pem\")\n   \n    # The cert.pem is your certificate (private key), and the cert.pub can be obtained from the private # key as following: ssh-keygen -y  -f ./cert.pem. Save the output into \"cert.pub\". \n","category":"page"}]
}
